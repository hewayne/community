<?php/** * Created by PhpStorm. * User: wayne * Date: 2016/12/2 * Time: 1:40 */namespace frontend\models;use common\models\Baike;use common\models\Detail;use common\models\RelationBaikeTag;use yii\base\Exception;use yii\base\Model;use Yii;use yii\data\Pagination;use yii\db\Query;class BaikeForm extends Model {    public $id;    public $title;    public $content;    public $label_img;    public $cat_id;    public $tags;    public $is_valid;    public $verifyCode;    public $_lastError = '';    const SCENARIO_CREATE = 'create';    const SCENARIO_UPDATE = 'update';    const EVENT_AFTER_CREATE = 'eventAfterCreate';    const EVENT_AFTER_UPDATE = 'eventAfterUpdate';    public function scenarios()    {        $scenarios = [            self::SCENARIO_CREATE => ['title', 'content', 'tags', 'is_valid', 'verifyCode'],            self::SCENARIO_UPDATE => ['title', 'content', 'tags', 'is_valid', 'verifyCode'],        ];        return array_merge(parent::scenarios(), $scenarios);    }    public function rules()    {        return [            [['title', 'content', 'is_valid'], 'required', 'message' => '不能为空'],            [['title'], 'string', 'min'=>4, 'max'=>35],            [['tags'], 'string', 'min'=>2, 'max'=>20],            [['verifyCode'], 'captcha'],        ];    }    public function attributeLabels()    {        return [            'id' => 'ID',            'title' => '标题',            'content' => '编辑内容',            'summary' => 'Summary',            'label_img' => 'Label Img',            'cat_id' => 'Cat',            'user_id' => 'User ID',            'user_name' => 'User Name',            'is_valid' => '是否立即发布',            'created_at' => 'Created At',            'updated_at' => 'Updated At',            'book_chapter' => 'Book Chapter',            'verifyCode' => '验证码',        ];    }    public function attributes()    {        return parent::attributes(); // TODO: Change the autogenerated stub    }    /*获取百科数据（分页）*/    public static function getBaike($pageSize, $condition){        $select = ['id', 'title', 'summary', 'label_img', 'book_chapter'];        $query = Baike::find()->select($select)->where($condition);        $pagination = new Pagination([            'defaultPageSize' => $pageSize,            'totalCount' => $query->count(),        ]);        $baikeData = $query->orderBy(['created_at' => SORT_DESC, 'browser' => SORT_DESC])            ->offset($pagination->offset)            ->limit($pagination->limit)->asArray()->all();        return ['baike' => $baikeData, 'pagination' => $pagination];    }    public static function getSearch($keyword){        $searchData = Baike::find()->select(['id', 'title', 'summary', 'label_img',])            ->where(['is_valid' => 1])            ->andWhere(['like', 'title', $keyword])            ->limit(10)            ->orderBy(['browser' => SORT_ASC])->asArray()->all();        return $searchData;    }    /**     * 创建百科文章     */    public function create(){        $transation = Yii::$app->db->beginTransaction();        try{            $model = new Baike();            $model->setAttributes($this->attributes);            $model->is_valid = $this->is_valid;            $model->label_img = $this->_getLabelImg();      //获取label_img            $model->summary = $this->_getSummary(); //获取摘要            $model->user_id = Yii::$app->user->identity->getId();  //获取登录用户的ID            $model->user_name = Yii::$app->user->identity->username;  //获取登录用户的用户名            $model->created_at = time();            if (!$model->save()){                throw new \Exception('博文保存失败');            }            $this->id = $model->id;  //获取id，以便在BaikeController中跳转到此id的文章            $this->_addBaikeDetail();   //将数据添加到文章详情页            if (!empty($this->tags)){                $this->_addTags();  //保存标签            }            $transation->commit();            return true;        }catch (\Exception $exception){            $transation->rollBack();            $this->_lastError = $exception->getMessage();            return false;        }    }    //获取文章摘要    private function _getSummary($start = 0, $end = 110){        if (empty($this->content)){            return null;        }        return mb_substr(str_replace('&nbsp;', '', strip_tags($this->content)), $start, $end, "utf-8").' • • •';    }    //从content中获取img    private function _getLabelImg(){        $pattern ='<img.*?src="(.*?)">';        $times = preg_match($pattern,$this->content,$matches);        return $times ? $matches[1] : 'http://oj8hunqbx.bkt.clouddn.com/baike/top/baike-top-img.jpg';    }    //添加内容content到百科详情数据表中    private function _addBaikeDetail(){        $detailModel = new Detail();        $detailModel->baike_id = $this->id;        $detailModel->content = $this->content;        if (!$detailModel->save()){            throw new Exception('百科详情数据content保存失败');        }    }    //保存标签    private function _addTags(){        $tagsForm = new TagsForm();        $tagsForm->tags = explode(',', substr($this->tags, 0, -1));        $tagIds = $tagsForm->saveTags();        //删除原关联关系；        RelationBaikeTag::deleteAll(['baike_id' => $this->id]);        //批量保存文章和标签的关联关系        if (!empty($tagIds)){            $row = [];            foreach ($tagIds as $k => $tagId){                $row[$k]['baike_id'] = $this->id;                $row[$k]['tag_id'] = $tagId;            }            $res = (new Query())->createCommand()->batchInsert(RelationBaikeTag::tableName(),                ['baike_id', 'tag_id'], $row)->execute();            if (!$res){                throw new Exception('关联关系保存失败');            }        }    }    //获取一条百科数据    public static function getBaikeDataById($baikeId){        $res = Baike::find()->where(['id' => $baikeId])->with('detail', 'relate.tag')->asArray()->one();        if (!$res){            throw new Exception('没有此条百科数据');        }        if (isset($res['relate']) && !empty($res['relate'])){            foreach ($res['relate'] as $k => $v){                $res['tags'][$k]['tag_name'] = $v['tag']['tag_name'];                $res['tags'][$k]['baike_num'] = $v['tag']['baike_num'];                $res['tags'][$k]['id'] = $v['tag']['id'];            }            unset($res['relate']);        }        $res['content'] = $res['detail']['content'];        unset($res['detail']);        return $res;    }}